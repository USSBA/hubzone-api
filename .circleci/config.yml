version: 2.1

orbs:
  ruby: circleci/ruby@1.1.2
  node: circleci/node@4.2.0
  aws-cli: circleci/aws-cli@1.4.0
  terraform: circleci/terraform@2.0.1

executors:
  python:
    docker:
    - image: cimg/python:3.9

  base:
    docker:
    - image: cimg/base:2020.12

  ruby:
    docker:
    - image: circleci/ruby:2.5.3-node-browsers
      environment:
        RAILS_ENV: test

  ruby-with-postgres:
    docker:
    - image: circleci/ruby:2.5.3-node-browsers
      environment:
        RAILS_ENV: test
        HUBZONE_API_DB_USER: postgres
        HUBZONE_API_DB_PASSWORD: postgres
        HUBZONE_API_DB_HOST: localhost
        HUBZONE_API_DB_NAME: hzgeo
        SECRET_KEY_BASE: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
        HUBZONE_GOOGLE_API_KEY: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    - image: circleci/postgres:12-alpine-postgis
      environment:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: hzgeo

commands:

  aws-init:
    parameters:
      region:
        type: string
        description: A default AWS region name
        default: us-east-1
    steps:
    - aws-cli/setup
    - run:
        name: aws-init
        command: |
          echo 'AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-<< parameters.region >>}' >> $BASH_ENV
          echo 'AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)' >> $BASH_ENV
          echo 'AWS_ECR_ENDPOINT="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"' >> $BASH_ENV
          source $BASH_ENV

  ecr-login:
    steps:
    - run:
        name: ecr docker login
        command: |
          aws_version=`aws --version 2>&1`
          if echo $aws_version | grep 'aws-cli/1' > /dev/null; then
            echo "aws-cli v1 detected. Logging in to ecr docker..."
            `aws ecr get-login --no-include-email --region ${AWS_DEFAULT_REGION}`
          elif echo $aws_version | grep 'aws-cli/2' > /dev/null; then
            echo "aws-cli v2 detected. Logging in to ecr docker..."
            aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin "${AWS_ECR_ENDPOINT}"
          else
            echo "Can't detect the version of awscli being used..."
            exit 1
          fi

  ecr-image-build:
    parameters:
      dockerfile:
        type: string
        default: Dockerfile
      image_name:
        type: string
    steps:
    - run:
        name: Build << parameters.dockerfile >> docker image
        command: |
          docker image build . -f "<< parameters.dockerfile >>" --tag "${AWS_ECR_ENDPOINT}/<< parameters.image_name >>:${CIRCLE_SHA1}"

  ecr-image-push:
    parameters:
      image_name:
        type: string
    steps:
    - deploy:
        name: docker image push
        command: |
          docker image push "${AWS_ECR_ENDPOINT}/<< parameters.image_name >>:${CIRCLE_SHA1}"
          echo "Successfully pushed image: ${AWS_ECR_ENDPOINT}/<< parameters.image_name >>:${CIRCLE_SHA1}"
          docker image tag \
            "${AWS_ECR_ENDPOINT}/<< parameters.image_name >>:${CIRCLE_SHA1}" \
            "${AWS_ECR_ENDPOINT}/<< parameters.image_name >>:${CIRCLE_BRANCH:-${CIRCLE_TAG:-NO_BRANCH_OR_TAG_CONFIGURED_BY_CIRCLE}}"
          docker image push "${AWS_ECR_ENDPOINT}/<< parameters.image_name >>:${CIRCLE_BRANCH:-${CIRCLE_TAG:-NO_BRANCH_OR_TAG_CONFIGURED_BY_CIRCLE}}"
          echo "Successfully pushed image: ${AWS_ECR_ENDPOINT}/<< parameters.image_name >>:${CIRCLE_BRANCH:-${CIRCLE_TAG:-NO_BRANCH_OR_TAG_CONFIGURED_BY_CIRCLE}"

  build-containers:
    steps:
    - ecr-image-build:
        image_name: hubzone/hubzone-api

  push-containers:
    steps:
    - ecr-image-push:
        image_name: hubzone/hubzone-api

  install-system-dependencies:
    steps:
    - run:
        name: Install system dependencies
        command: |
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo apt update
          sudo apt install -y postgresql-client-12

  install-and-cache-gems:
    steps:
    - checkout
    - run:
        name: configure gem sources
        command: |
          bundle config geminabox.sba-one.net ${BUNDLE_GEMINABOX__SBA__ONE__NET}
    - ruby/install-deps:
        key: gems-v1

  migrate-db:
    steps:
    - run:
        name: migrate-db
        command: |
          bundle exec rake db:create db:migrate

jobs:

  rubocop:
    executor: ruby
    steps:
    - install-system-dependencies
    - install-and-cache-gems
    - ruby/rubocop-check

  rspec:
    executor: ruby-with-postgres
    steps:
    - install-system-dependencies
    - install-and-cache-gems
    - migrate-db
    - run:
        name: Run rspec
        command: bundle exec rspec --format progress spec

  rspec-docker:
    executor: python
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
    - run:
        name: Build rspec in Docker container
        command: |
          git describe --long > REVISION || touch REVISION
          cat REVISION
          docker-compose -f docker/docker-compose-test.yml build rspec
    - run:
        name: Run rspec in Docker container
        command: |
          docker-compose -f docker/docker-compose-test.yml run rspec

  #brakeman:
  #  executor: ruby
  #  steps:
  #    - checkout
  #    - restore_cache:
  #        keys:
  #        - v1-dependencies-{{ checksum "Gemfile.lock" }}
  #        - v1-dependencies-
  #    - run:
  #        name: brakeman
  #        parallel: true
  #        command: |
  #          gem install --no-document brakeman
  #          brakeman --exit-on-warn .

  docker-build-and-push:
    executor: base
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
    - aws-init
    - ecr-login
    - ecr-image-build:
        image_name: hubzone/hubzone-api
    - ecr-image-push:
        image_name: hubzone/hubzone-api

workflows:
  version: 2
  activity:
    jobs:
    - rubocop
    - rspec
    - rspec-docker
    - docker-build-and-push:
        context: certify-lower
        filters:
          branches:
            ignore: /.*/
          tags:
            only:
            - build-lower
            - /^v[0-9]+(\.[0-9]+)(\.[0-9]+)*/

################################################################################
# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
#version: 2.1
#
#orbs:
#  ruby: circleci/ruby@1.1.2
#
#executors:
#  ruby:
#    docker:
#      - image: circleci/ruby:2.5.1-node-browsers
#        environment:
#          RAILS_ENV: test
#  ruby-with-postgres:
#    docker:
#      - image: circleci/ruby:2.5.1-node-browsers
#        environment:
#          HUBZONE_API_DB_USER: postgres
#          HUBZONE_API_DB_PASSWORD: postgres
#          RAILS_ENV: test
#      - image: circleci/postgres:9.6-alpine-postgis
#        environment:
#          POSTGRES_USER: postgres
#          POSTGRES_PASSWORD: postgres
#
#commands:
#  install-system-dependencies:
#    steps:
#      - run:
#          name: Install system dependencies
#          command: |
#            sudo apt update
#            sudo apt install -y \
#              postgresql-client-9.6
#  install-and-cache-gems:
#    steps:
#      - checkout
#      - ruby/install-deps:
#          key: gems-v1
#      #- run: sudo npm install -g istanbul
#  migrate-db:
#    steps:
#      - run:
#          name: migrate-db
#          command: |
#            bundle exec rake db:create db:migrate
#workflows:
#  version: 2
#  test:
#    jobs:
#      - rubocop
#      - rspec
#      - rspec-docker
#      - brakeman
#jobs:
#  rubocop:
#    executor: ruby
#    steps:
#      - install-system-dependencies
#      - install-and-cache-gems
#      - ruby/rubocop-check
#  rspec:
#    executor: ruby-with-postgres
#    steps:
#      - install-system-dependencies
#      - install-and-cache-gems
#      - migrate-db
#      - run:
#          name: Run rspec
#          command: bundle exec rspec --format progress
#  rspec-docker:
#    executor: ruby
#    steps:
#    - checkout
#    - setup_remote_docker:
#        docker_layer_caching: true
#    - run:
#        name: Build rspec in Docker container
#        command: |
#          git describe --long > REVISION || touch REVISION
#          cat REVISION
#          docker-compose -f docker/docker-compose-test.yml build rspec
#    - run:
#        name: Run rspec in Docker container
#        command: |
#          docker-compose -f docker/docker-compose-test.yml run rspec
#
#  brakeman:
#    executor: ruby
#    steps:
#      - install-system-dependencies
#      - install-and-cache-gems
#      - run:
#          name: brakeman
#          parallel: true
#          command: |
#            gem install --no-document brakeman
#            brakeman --exit-on-warn .
