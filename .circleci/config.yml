version: 2.1

orbs:
  ruby: circleci/ruby@1
  node: circleci/node@5
  aws-cli: circleci/aws-cli@1
  terraform: circleci/terraform@2

executors:
  circle-machine:
    # Required for multi-container docker-compose setups
    machine:
      image: ubuntu-2004:202107-02
      docker_layer_caching: true

  base:
    docker:
      - image: cimg/base:2020.12

  ruby:
    docker:
      - image: cimg/ruby:2.7.4-browsers
        environment:
          RAILS_ENV: test

  ruby-with-postgres:
    docker:
      - image: cimg/ruby:2.7.4-browsers
        environment:
          RAILS_ENV: test
          HUBZONE_API_DB_USER: postgres
          HUBZONE_API_DB_PASSWORD: postgres
          HUBZONE_API_DB_HOST: localhost
          HUBZONE_API_DB_NAME: hzgeo
          SECRET_KEY_BASE: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
          HUBZONE_GOOGLE_API_KEY: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
      - image: cimg/postgres:12.9-postgis
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: hzgeo

commands:
  aws-init:
    parameters:
      region:
        type: string
        description: A default AWS region name
        default: us-east-1
    steps:
      - aws-cli/setup
      - run:
          name: aws-init
          command: |
            echo 'AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-<< parameters.region >>}' >> $BASH_ENV
            echo 'AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)' >> $BASH_ENV
            echo 'AWS_ECR_ENDPOINT="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"' >> $BASH_ENV
            source $BASH_ENV
  ecr-login:
    steps:
      - run:
          name: ecr docker login
          command: |
            aws_version=`aws --version 2>&1`
            if echo $aws_version | grep 'aws-cli/1' > /dev/null; then
              echo "aws-cli v1 detected. Logging in to ecr docker..."
              `aws ecr get-login --no-include-email --region ${AWS_DEFAULT_REGION}`
            elif echo $aws_version | grep 'aws-cli/2' > /dev/null; then
              echo "aws-cli v2 detected. Logging in to ecr docker..."
              aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin "${AWS_ECR_ENDPOINT}"
            else
              echo "Can't detect the version of awscli being used..."
              exit 1
            fi
  ecr-image-build:
    parameters:
      dockerfile:
        type: string
        default: Dockerfile
      image_name:
        type: string
    steps:
      - run:
          name: Build << parameters.dockerfile >> docker image
          command: |
            docker image build . -f "<< parameters.dockerfile >>" --tag "${AWS_ECR_ENDPOINT}/<< parameters.image_name >>:${CIRCLE_SHA1}"
  ecr-image-push:
    parameters:
      image_name:
        type: string
    steps:
    - deploy:
        name: docker image push
        command: |
          docker image tag "${AWS_ECR_ENDPOINT}/<< parameters.image_name >>:${CIRCLE_SHA1}" \
                           "${AWS_ECR_ENDPOINT}/<< parameters.image_name >>:${CIRCLE_BRANCH:-${CIRCLE_TAG:-NO_BRANCH_OR_TAG_CONFIGURED_BY_CIRCLE}}"
          docker image push "${AWS_ECR_ENDPOINT}/<< parameters.image_name >>:${CIRCLE_SHA1}"
          echo "Successfully pushed image: ${AWS_ECR_ENDPOINT}/<< parameters.image_name >>:${CIRCLE_SHA1}"
          docker image push "${AWS_ECR_ENDPOINT}/<< parameters.image_name >>:${CIRCLE_BRANCH:-${CIRCLE_TAG:-NO_BRANCH_OR_TAG_CONFIGURED_BY_CIRCLE}}"
          echo "Successfully pushed image: ${AWS_ECR_ENDPOINT}/<< parameters.image_name >>:${CIRCLE_BRANCH:-${CIRCLE_TAG:-NO_BRANCH_OR_TAG_CONFIGURED_BY_CIRCLE}}"

  build-image:
    steps:
      - when:
          condition: 
            - matches: { pattern: 'deploy\-demo|rc\-v[0-9\.]+|v[0-9\.]+', value: << pipeline.git.tag >> }
          steps:
            - ecr-image-build:
                image_name: hubzone/hubzone-api
      - unless:
        - equals: [ "deploy-preview", << pipeline.git.tag >> ]
        steps:
          - ecr-image-build:
              image_name: hubzone-api-preview
  push-image:
    steps:
      - when:
          condition:
            - matches: { pattern: 'deploy\-demo|rc\-v[0-9\.]+|v[0-9\.]+', value: << pipeline.git.tag >> }
          steps:
            - ecr-image-push:
              image_name: hubzone/hubzone-api
      - unless:
        - equals: [ "deploy-preview", << pipeline.git.tag >> ]
        steps:
          - ecr-image-push:
              image_name: hubzone-api-preview
  install-system-dependencies:
    steps:
    - run:
        name: Install system dependencies
        command: |
          sudo apt install -y lsb-release
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo apt update
          sudo apt install -y postgresql-client-12

  install-and-cache-gems:
    steps:
    - checkout
    - run:
        name: configure gem sources
        command: |
          bundle config geminabox.sba-one.net ${BUNDLE_GEMINABOX__SBA__ONE__NET}
    - ruby/install-deps:
        key: gems-v1

  migrate-db:
    steps:
    - run:
        name: migrate-db
        command: |
          bundle exec rake db:create db:migrate

  terraform-install:
    steps:
      - terraform/install:
          terraform_version: 1.0.9
  terraform-format:
    parameters:
      folder:
        type: string
        description: A relative path from the project root in which to perform terrafrom fmt
    steps:
      - deploy:
          name: Terraform Format Check
          command: |
            throw_error() {
              echo $1
              return 1
            }
            cd << parameters.folder >> || throw_error "FATAL: command 'cd << parameters.folder >>' has failed"
            terraform fmt -check -recursive

  terraform-validate:
    parameters:
      folder:
        type: string
        description: A relative path from the project root in which to perform terrafrom validate
      workspace:
        type: string
        description: A workspace in which to perform terraform validate
    steps:
      - deploy:
          name: Terraform Validate Check
          command: |
            throw_error() {
              echo $1
              return 1
            }
            cd << parameters.folder >> || throw_error "FATAL: command 'cd << parameters.folder >>' has failed"
            terraform workspace select << parameters.workspace >> || throw_error "FATAL: command 'terraform workspace select << parameters.workspace >>' has failed"
            terraform validate || throw_error "FATAL: command 'terraform validate' has failed"

  terraform-init:
    parameters:
      folder:
        type: string
        description: A relative path from the project root in which to perform terrafrom init
    steps:
    - deploy:
        name: Terraform Init
        command: |
          throw_error() {
            echo $1
            return 1
          }
          cd << parameters.folder >> || throw_error  "FATAL: command 'cd << parameters.folder >>' has failed"
          terraform -version || throw_error "FATAL: command 'terraform -version' has failed"
          terraform init -input=false || throw_error "FATAL: command 'terraform init -input-false' has failed"
          echo "image_tag = \"$CIRCLE_SHA1\"" >> ./build.auto.tfvars

  terraform-plan:
    parameters:
      folder:
        type: string
        description: A relative path from the project root in which to perform terrafrom plan
      workspace:
        type: string
        description: A workspace in which to perform terraform plan
    steps:
    - deploy:
        name: Terraform Plan
        command: |
          throw_error() {
            echo $1
            return 1
          }
          cd << parameters.folder >> || throw_error "FATAL: command 'cd << parameters.folder >>' has failed"
          terraform workspace select << parameters.workspace >> || throw_error "FATAL: command 'terraform workspace select << parameters.workspace >>' has failed"
          terraform plan -out=<< parameters.workspace >>.tfplan -input=false || throw_error "FATAL: command 'terraform plan -out=<< parameters.workspace >>.tfplan -input=false' has failed"

  terraform-apply:
    parameters:
      folder:
        type: string
        description: A relative path from the project root in which to perform terrafrom apply
      workspace:
        type: string
        description: A workspace in which to perform terraform apply
    steps:
    - deploy:
        name: Terraform Apply
        command: |
          throw_error() {
            echo $1
            return 1
          }
          cd << parameters.folder >> || ( echo "directory << parameters.folder >> does not exist"; exit 1 )
          terraform workspace select << parameters.workspace >> || ( echo "terraform workspace select << parameters.workspace >> has failed"; exit 1 )
          terraform apply -input=false << parameters.workspace >>.tfplan || ( echo "terraform apply has failed"; exit 1 )

jobs:
  rubocop:
    executor: ruby
    steps:
    - install-system-dependencies
    - install-and-cache-gems
    - ruby/rubocop-check
  rspec:
    executor: ruby-with-postgres
    steps:
    - install-system-dependencies
    - install-and-cache-gems
    - migrate-db
    - run:
        name: Run rspec
        command: bundle exec rspec --format progress spec
  rspec-docker:
    executor: circle-machine
    steps:
    - checkout
    - run:
        name: Build rspec in Docker container
        command: |
          git describe --long > REVISION || touch REVISION
          cat REVISION
          docker-compose -f docker/docker-compose-test.yml build rspec
    - run:
        name: Run rspec in Docker container
        command: |
          docker-compose -f docker/docker-compose-test.yml run rspec
  #brakeman:
  #  executor: ruby
  #  steps:
  #    - checkout
  #    - restore_cache:
  #        keys:
  #        - v1-dependencies-{{ checksum "Gemfile.lock" }}
  #        - v1-dependencies-
  #    - run:
  #        name: brakeman
  #        parallel: true
  #        command: |
  #          gem install --no-document brakeman
  #          brakeman --exit-on-warn .
  test-terraform-validate:
    executor: base
    parameters:
      workspace:
        type: string
        description: A terraform workspace name
        steps:
          - checkout
          - aws-init
          - terraform-install
          - when:
              condition: 
                - matches: { pattern: 'deploy\-demo|rc\-v[0-9\.]+|v[0-9\.]+', value: << pipeline.git.tag >> }
              steps:
                - terraform-init:
                    folder: terraform
          - unless:
            - equals: [ "deploy-preview", << pipeline.git.tag >> ]
            steps:
              - terraform-init:
                  folder: terraform/preview
          - when:
              condition: 
                - matches: { pattern: 'deploy\-demo|rc\-v[0-9\.]+|v[0-9\.]+', value: << pipeline.git.tag >> }
              steps:
                - terraform-validate:
                    folder: terraform
          - unless:
            - equals: [ "deploy-preview", << pipeline.git.tag >> ]
            steps:
              - terraform-validate:
                  folder: terraform/preview
  test-terraform-format:
    executor: base
    steps:
      - checkout
      - terraform-install
      - when:
          condition: 
            - matches: { pattern: 'deploy\-demo|rc\-v[0-9\.]+|v[0-9\.]+', value: << pipeline.git.tag >> }
          steps:
            - terraform-format:
                folder: terraform
      - unless:
        - equals: [ "deploy-preview", << pipeline.git.tag >> ]
        steps:
          - terraform-format:
              folder: terraform/preview
  test-terraform-plan:
    executor: base
    parameters:
      workspace:
        type: string
        description: A terraform workspace name
    steps:
      - checkout
      - aws-init
      - terraform-install
      - when:
          condition: 
            - matches: { pattern: 'deploy\-demo|rc\-v[0-9\.]+|v[0-9\.]+', value: << pipeline.git.tag >> }
          steps:
            - terraform-init:
                folder: terraform
      - unless:
        - equals: [ "deploy-preview", << pipeline.git.tag >> ]
        steps:
          - terraform-init:
              folder: terraform/preview
      - when:
          condition: 
            - matches: { pattern: 'deploy\-demo|rc\-v[0-9\.]+|v[0-9\.]+', value: << pipeline.git.tag >> }
          steps:  
            - terraform-plan:
                folder: terraform
                workspace: << parameters.workspace >>
      - unless:
        - equals: [ "deploy-preview", << pipeline.git.tag >> ]
        steps:
          - terraform-plan:
              folder: terraform/preview
              workspace: << parameters.workspace >>
  build-containers:
    executor: circle-machine
    steps:
      - checkout
      - run:
          name: aws-env
          command: |
            echo 'AWS_ECR_ENDPOINT="ecr-temp"' >> $BASH_ENV
      - build-image
  build-and-push-containers:
    executor: circle-machine
    steps:
      - checkout
      - aws-init
      - ecr-login
      - build-image
      - push-image
  deploy-service:
    executor: circle-machine
    parameters:
      workspace:
        type: string
        description: A terraform workspace name
    steps:
      - checkout
      - aws-init
      - terraform-install
      - when:
          condition: 
            - matches: { pattern: 'deploy\-demo|rc\-v[0-9\.]+|v[0-9\.]+', value: << pipeline.git.tag >> }
          steps:
            - terraform-init:
                folder: terraform
      - unless:
        - equals: [ "deploy-preview", << pipeline.git.tag >> ]
        steps:
          - terraform-init:
              folder: terraform/preview
      - when:
          condition: 
            - matches: { pattern: 'deploy\-demo|rc\-v[0-9\.]+|v[0-9\.]+', value: << pipeline.git.tag >> }
          steps:
            - terraform-plan:
                folder: terraform
                workspace: << parameters.workspace >>
      - unless:
        - equals: [ "deploy-preview", << pipeline.git.tag >> ]
        steps:
          - terraform-plan:
              folder: terraform/preview
              workspace: << parameters.workspace >>
      - when:
          condition: 
            - matches: { pattern: 'deploy\-demo|rc\-v[0-9\.]+|v[0-9\.]+', value: << pipeline.git.tag >> }
          steps:
            - terraform-apply:
                folder: terraform
                workspace: << parameters.workspace >>
      - unless:
        - equals: [ "deploy-preview", << pipeline.git.tag >> ]
        steps:
          - terraform-apply:
              folder: terraform/preview
              workspace: << parameters.workspace >>
  deploy-preview-service:
    executor: circle-machine
    parameters:
      workspace:
        type: string
        description: A terraform workspace name
    steps:
      - checkout
      - aws-init
      - terraform-install
      - terraform-init:
          folder: terraform/preview
      - terraform-plan:
          folder: terraform/preview
          workspace: << parameters.workspace >>
      - terraform-apply:
          folder: terraform/preview
          workspace: << parameters.workspace >>

workflows:
  version: 2
  test:
    jobs:
    - rubocop
    - rspec
    - rspec-docker
    - test-terraform-validate:
        context: certify-lower
        workspace: demo
    - test-terraform-format
    - build-containers
  deploy:
    jobs:
    - build-and-push-containers:
        name: build-and-push-containers-lower
        context: certify-lower
        filters:
          branches:
            ignore: /.*/
          tags:
            only:
            - build-lower
            - deploy-demo
            - deploy-preview
    - deploy-service:
        name: deploy-service-demo
        context: certify-lower
        workspace: demo
        requires:
        - build-and-push-containers-lower
        filters:
          branches:
            ignore: /.*/
          tags:
            only:
            - deploy-demo
    - deploy-preview-service:
        name: deploy-service-preview
        context: certify-lower
        workspace: demo
        requires:
        - build-and-push-containers-lower
        filters:
          branches:
            ignore: /.*/
          tags:
            only:
            - deploy-preview
    - build-and-push-containers:
        name: build-and-push-containers-upper
        context: certify-upper
        filters:
          branches:
            ignore:
            - /.*/
          tags:
            only:
            - /rc-v[0-9]+(\.[0-9]+)*$/
            - /v[0-9]+(\.[0-9]+)*$/
    - deploy-service:
        name: deploy-service-stg
        context: certify-upper
        workspace: stg
        requires:
        - build-and-push-containers-upper
        filters:
          branches:
            ignore:
            - /.*/
          tags:
            only:
            - /rc-v[0-9]+(\.[0-9]+)*$/
    - test-terraform-plan:
        name: test-terraform-plan-prod
        context: certify-upper
        workspace: prod
        requires:
        - build-and-push-containers-upper
        filters:
          branches:
            ignore:
            - /.*/
          tags:
            only:
            - /v[0-9]+(\.[0-9]+)*$/
    - hold-for-approval:
        type: approval
        context: certify-upper
        requires:
          - test-terraform-plan-prod
        filters:
          branches:
            ignore:
            - /.*/
          tags:
            only:
            - /v[0-9]+(\.[0-9]+)*$/
    - deploy-service:
        name: deploy-service-prod
        context: certify-upper
        workspace: prod
        requires:
        - hold-for-approval
        filters:
          branches:
            ignore:
            - /.*/
          tags:
            only:
            - /v[0-9]+(\.[0-9]+)*$/
